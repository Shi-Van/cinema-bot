import logging
from typing import List, Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (Message, InlineKeyboardMarkup, CallbackQuery, User as TelegramUser)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .config import settings
from .db.database import Database
from .db.models import SearchHistory, User
from .kinopoisk_api import KinopoiskAPI, MovieInfo
from .utils.text_loader import get_text

logger = logging.getLogger(__name__)

class CinemaBot:
    def __init__(self):
        self.bot = Bot(token=settings.BOT_TOKEN)
        self.dp = Dispatcher()
        self.db = Database()
        self.kinopoisk = KinopoiskAPI()
        
        self.dp.message.register(self.cmd_start, Command(commands=["start"]))
        self.dp.message.register(self.cmd_help, Command(commands=["help"]))
        self.dp.message.register(self.cmd_history, Command(commands=["history"]))
        self.dp.message.register(self.cmd_stats, Command(commands=["stats"]))
        self.dp.message.register(self.handle_search)
        self.dp.callback_query.register(self.handle_pagination, F.data.startswith("pagination_"))
        self.dp.callback_query.register(self.handle_movie_select, F.data.startswith("movie_"))

    async def _get_or_create_user(self, telegram_user: Optional[TelegramUser]) -> User:
        if not telegram_user:
            raise ValueError("Telegram user is None")
        user = await self.db.get_or_create_user(
            telegram_id=telegram_user.id,
            username=telegram_user.username
        )
        if not user:
            raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return user

    async def cmd_start(self, message: Message) -> None:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        await self._get_or_create_user(message.from_user)
        await message.answer(get_text("start"))

    async def cmd_help(self, message: Message) -> None:
        await message.answer(get_text("help"))

    async def cmd_history(self, message: Message) -> None:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        user = await self._get_or_create_user(message.from_user)
        await self._show_paginated_content(message, "history", user.id)

    async def cmd_stats(self, message: Message) -> None:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        user = await self._get_or_create_user(message.from_user)
        await self._show_paginated_content(message, "stats", user.id)

    async def handle_search(self, message: Message) -> None:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        await self._get_or_create_user(message.from_user)
        
        movies: List[MovieInfo] = await self.kinopoisk.search_movie(message.text)
        
        if not movies:
            await message.answer("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòî")
            return
            
        builder = InlineKeyboardBuilder()
        for movie in movies[:5]:
            button_text = f"{movie.title}"
            if movie.year:
                button_text += f" ({movie.year})"
            if movie.rating:
                button_text += f" ü§©{movie.rating}"
            if movie.type == "tv-series":
                button_text += " üì∫"
            
            builder.button(
                text=button_text,
                callback_data=f"movie_{movie.id}"
            )
        builder.adjust(1)
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=builder.as_markup()
        )

    async def handle_movie_select(self, callback: CallbackQuery) -> None:
        try:
            if not callback.message or not isinstance(callback.message, Message):
                await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            if not callback.data:
                await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", show_alert=True)
                return
            movie_id = int(callback.data.split("_")[1])
            
            movie: Optional[MovieInfo] = await self.kinopoisk.get_movie_details(movie_id)
            if not movie:
                await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ", show_alert=True)
                return
                
            user = await self.db.get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            query_text = callback.message.text if callback.message.text is not None else "–ü–æ–∏—Å–∫"
            first_line = query_text.split("\n")[0] if query_text else "–ü–æ–∏—Å–∫"
            await self.db.add_search_history(
                user_id=user.id,
                query=first_line,
                movie_id=str(movie.id),
                movie_title=movie.title,
                movie_url=f"https://www.sspoisk.ru/film/{movie.id}/",
                movie_rating=movie.rating
            )
            
            message = f"üé¨ {movie.title}"
            if movie.original_title:
                message += f"\nüìù {movie.original_title}"
            if movie.type == "tv-series":
                message += "\nüì∫ –°–µ—Ä–∏–∞–ª"
            if movie.year:
                message += f"\nüìÖ {movie.year}"
            if movie.movie_length:
                message += f"\n‚è± {movie.movie_length} –º–∏–Ω."
            if movie.age_rating:
                message += f"\nüîû {movie.age_rating}+"
            if movie.rating:
                message += f"\nü§© –†–µ–π—Ç–∏–Ω–≥ –ö–ü: {movie.rating}"
                if movie.votes["kp"]:
                    message += f" ({movie.votes['kp']:,} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ü–µ–Ω–∏–ª–∏)"
            if movie.genres:
                message += f"\nüé≠ –ñ–∞–Ω—Ä—ã: {', '.join(movie.genres)}"
            if movie.countries:
                message += f"\nüåç –°—Ç—Ä–∞–Ω—ã: {', '.join(movie.countries)}"
            if movie.short_description:
                message += f"\n\nüìñ <blockquote>{movie.short_description}</blockquote>"
            elif movie.description:
                message += f"\n\nüìñ <blockquote>{movie.description}</blockquote>"
            
            if movie.external_id["imdb"]:
                message += f"\n\nüéØ IMDB: https://www.imdb.com/title/{movie.external_id['imdb']}/"
            message += f"\nüéØ –ö–∏–Ω–æ–ø–æ–∏—Å–∫: https://www.kinopoisk.ru/film/{movie.id}/"
            
            builder = InlineKeyboardBuilder()
            builder.button(
                text="üé¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å",
                url=f"https://www.sspoisk.ru/film/{movie.id}/"
            )
            
            if movie.poster_url:
                try:
                    await callback.message.answer_photo(
                        photo=movie.poster_url,
                        caption=message,
                        reply_markup=builder.as_markup(),
                        parse_mode="HTML"
                    )
                    await callback.message.delete()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–µ—Ä–∞: {e}")
                    await callback.message.edit_text(
                        message,
                        reply_markup=builder.as_markup(),
                        disable_web_page_preview=False,
                        parse_mode="HTML"
                    )
            else:
                await callback.message.edit_text(
                    message,
                    reply_markup=builder.as_markup(),
                    disable_web_page_preview=False,
                    parse_mode="HTML"
                )
            
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ", show_alert=True)

    def _get_history_keyboard(self, current_page: int, total_pages: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        
        if current_page > 1:
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"history_prev_{current_page}")
        if current_page < total_pages:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"history_next_{current_page}")
            
        return builder.as_markup()

    def _format_history_message(self, history: list[SearchHistory], current_page: int, total_pages: int) -> str:
        if not history:
            return "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞"
            
        message = f"üìù –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}):\n\n"
        for item in history:
            message += f"üîç {item.query}\n"
            message += f"üé¨ {item.movie_title}"
            if item.movie_rating:
                message += f" (ü§© {item.movie_rating})"
            message += "\n"
            if item.movie_url:
                message += f"üîó {item.movie_url}\n"
            message += f"üìÖ {item.timestamp.strftime('%d.%m.%Y %H:%M')}\n\n"
            
        return message

    async def _show_paginated_content(self, message: Message, content_type: str, user_id: int) -> None:
        page = 1
        if content_type == "history":
            content, total_pages = await self.db.get_user_history(user_id, page=page)
            text = self._format_history_message(content, page, total_pages)
        elif content_type == "stats":  # stats
            content, total_pages = await self.db.get_user_stats(user_id, page=page)
            text = self._format_stats_message(content, page, total_pages)
        else:
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
            return
            
        keyboard = self._get_pagination_keyboard(content_type, page, total_pages)
        await message.answer(text, reply_markup=keyboard, disable_web_page_preview=True)

    def _get_pagination_keyboard(self, content_type: str, current_page: int, total_pages: int) -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        
        if current_page > 1:
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"pagination_{content_type}_prev_{current_page}")
        if current_page < total_pages:
            builder.button(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"pagination_{content_type}_next_{current_page}")
            
        return builder.as_markup()

    def _format_stats_message(self, stats: list[dict], current_page: int, total_pages: int) -> str:
        if not stats:
            return "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞"
            
        message = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page} –∏–∑ {total_pages}):\n\n"
        
        for item in stats:
            message += f"üé¨ {item['movie_title']}\n"
            message += f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤: {item['search_count']}\n"
            if item['avg_rating']:
                message += f"ü§© –†–µ–π—Ç–∏–Ω–≥: {item['avg_rating']}\n"
            if item['movie_url']:
                message += f"–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å: {item['movie_url']}\n"
            message += "\n"
            
        return message

    async def handle_pagination(self, callback: CallbackQuery) -> None:
        try:
            if not callback.message or not isinstance(callback.message, Message):
                await callback.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return

            callback_data = callback.data or ""
            parts = callback_data.split("_")
            if len(parts) != 4:
                logger.error("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞–≥–∏–Ω–∞—Ü–∏–∏")
                return
            _, content_type, action, current_page_str = parts
            try:
                current_page = int(current_page_str)
            except ValueError:
                logger.error("–û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                return
            
            user = await self.db.get_user_by_telegram_id(callback.from_user.id)
            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            new_page = current_page + 1 if action == "next" else current_page - 1
            
            if content_type == "history":
                content, total_pages = await self.db.get_user_history(user.id, page=new_page)
                text = self._format_history_message(content, new_page, total_pages)
            elif content_type == "stats":
                content, total_pages = await self.db.get_user_stats(user.id, page=new_page)
                text = self._format_stats_message(content, new_page, total_pages)
            else:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)
                return
            
            if not content and total_pages > 0:
                await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)
                return
                
            keyboard = self._get_pagination_keyboard(content_type, new_page, total_pages)
            
            await callback.message.edit_text(
                text, 
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ {content_type}: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞", show_alert=True)

    async def start(self) -> None:
        await self.db.init()
        await self.dp.start_polling(self.bot) 